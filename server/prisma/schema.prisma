generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  firstName          String
  lastName           String
  role               String     @default("FOCAL_PERSON")
  contactNumber      String?
  status             String     @default("ACTIVE")
  hashedPassword     String
  resetPasswordToken String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  departmentId       Int
  department         Department @relation(fields: [departmentId], references: [id])
  projectProposals   ProjectProposal[]

  @@index([email])
  @@index([departmentId])
  @@map("users")
}

model Department {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  abbreviation     String            @unique
  description      String?
  logoUrl          String?
  status           String            @default("ACTIVE")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  academicPrograms AcademicProgram[]
  users            User[]
  projectProposals ProjectProposal[]

  @@map("departments")
}

model AcademicProgram {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  abbreviation  String     @unique
  description   String?
  totalStudents Int        @default(0)
  status        String     @default("ACTIVE")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  departmentId  Int
  department    Department @relation(fields: [departmentId], references: [id])
  projectProposals ProjectProposal[]

  @@index([departmentId])
  @@map("academic_programs")
}

model ProjectProposal {
  id                 Int            @id @default(autoincrement())
  title             String
  description       String
  bannerProgram     String
  targetBeneficiaries String
  targetArea        String
  targetDate        DateTime
  venue             String
  budget            Decimal        @db.Decimal(10, 2)
  status            String         @default("PENDING")
  
  // Foreign Keys
  departmentId      Int
  department        Department     @relation(fields: [departmentId], references: [id])
  programId         Int?
  program          AcademicProgram? @relation(fields: [programId], references: [id])
  
  // Metadata
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  user              User          @relation(fields: [userId], references: [id])

  @@index([departmentId])
  @@index([programId])
  @@index([userId])
  @@index([status])
  
  @@map("project_proposals")
}
