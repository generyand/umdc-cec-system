generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  firstName          String
  lastName           String
  role               String     @default("FOCAL_PERSON")
  contactNumber      String?
  status             String     @default("ACTIVE")
  hashedPassword     String
  resetPasswordToken String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  departmentId       Int
  department         Department @relation(fields: [departmentId], references: [id])
  projectProposals   ProjectProposal[]

  @@index([email])
  @@index([departmentId])
  @@map("users")
}

model Department {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  abbreviation     String            @unique
  description      String?
  logoUrl          String?
  status           String            @default("ACTIVE")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  academicPrograms AcademicProgram[]
  users            User[]
  projectProposals ProjectProposal[]
  bannerPrograms   BannerProgram[]

  @@map("departments")
}

model AcademicProgram {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  abbreviation  String     @unique
  description   String?
  totalStudents Int        @default(0)
  status        String     @default("ACTIVE")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  departmentId  Int
  department    Department @relation(fields: [departmentId], references: [id])
  projectProposals ProjectProposal[]

  @@index([departmentId])
  @@map("academic_programs")
}

model ProjectProposal {
  id                 Int            @id @default(autoincrement())
  title             String
  description       String
  bannerProgramId  Int?
  bannerProgram    BannerProgram?  @relation(fields: [bannerProgramId], references: [id])
  targetBeneficiaries String
  targetArea        String
  targetDate        DateTime
  venue             String
  budget            Decimal        @db.Decimal(10, 2)
  status            String         @default("PENDING")
  
  // File attachments
  attachments       ProjectAttachment[]  // One-to-many relationship with attachments
  
  // Foreign Keys
  departmentId      Int
  department        Department     @relation(fields: [departmentId], references: [id])
  programId         Int?
  program          AcademicProgram? @relation(fields: [programId], references: [id])
  
  // Metadata
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  communityId       Int?
  community         PartnerCommunity? @relation(fields: [communityId], references: [id])

  @@index([departmentId])
  @@index([programId])
  @@index([userId])
  @@index([status])
  @@index([communityId])
  @@index([bannerProgramId])
  
  @@map("project_proposals")
}

// New model for file attachments
model ProjectAttachment {
  id              Int            @id @default(autoincrement())
  fileName        String         // Original file name
  fileUrl         String         // URL or path where the file is stored
  fileSize        Int           // Size in bytes
  fileType        String         // MIME type (e.g., "application/pdf")
  uploadedAt      DateTime       @default(now())
  
  // Relationship with ProjectProposal
  proposalId      Int
  proposal        ProjectProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@map("project_attachments")
}

model PartnerCommunity {
  id              Int       @id @default(autoincrement())
  name            String    
  communityType   String    // Barangay, NGO, School, etc.
  address         String    
  adoptionStart   DateTime
  adoptionEnd     DateTime? // Optional end date (for ongoing partnerships)
  status          String    @default("ACTIVE")  // ACTIVE, INACTIVE, COMPLETED

  // Contact Information
  contactPerson   String
  contactEmail    String?   // Optional email
  contactNumber   String
  
  // Additional Details
  description     String?   // Brief description or notes about the partnership
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  projectProposals ProjectProposal[]

  @@index([status])
  @@index([communityType])
  @@map("partner_communities")
}

model BannerProgram {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  description   String?
  yearStarted   Int
  status        String            @default("ACTIVE")
  
  // Foreign Keys
  departmentId  Int
  department    Department        @relation(fields: [departmentId], references: [id])
  
  // Relationships
  projectProposals ProjectProposal[]
  
  // Metadata
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([departmentId])
  @@index([status])
  @@map("banner_programs")
}
