generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPER_ADMIN    // Full system access
  ADMIN           // Department-wide access and approvals
  STAFF           // Basic access for project creation/management
}

enum UserPosition {
  CEC_HEAD
  CEC_OFFICE_ASSISTANT
  CEC_COORDINATOR
  VP_DIRECTOR
  DEAN
  PROGRAM_HEAD
  FOCAL_PERSON
  CHIEF_OPERATION_OFFICER
}

enum ProposalStatus {
  PENDING
  APPROVED
  RETURNED
  RESUBMITTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  RETURNED
  RESUBMITTED
}

enum NotificationType {
  PROPOSAL_STATUS      // For proposal approval flow updates
  ACTIVITY_REMINDER    // For upcoming activities
  DEADLINE_ALERT       // For approaching deadlines
  SYSTEM_UPDATE       // For system-wide announcements
  ASSIGNMENT          // For task/role assignments
  DOCUMENT_UPDATE     // For document updates/submissions
  FEEDBACK           // For feedback/comments received
  COMMUNITY_UPDATE    // For partner community updates
  RESOURCE_ALERT     // For resource allocation/budget updates
  COMPLIANCE         // For compliance-related notifications
}

enum NotificationPriority {
  HIGH
  MEDIUM
  LOW
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  firstName          String
  lastName           String
  role               UserRole          @default(STAFF)
  position           UserPosition?     // Add this field, making it optional since not all users might have positions
  contactNumber      String?
  status             String            @default("ACTIVE")
  hashedPassword     String
  resetPasswordToken String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  departmentId       Int?
  department         Department?       @relation(fields: [departmentId], references: [id])
  academicProgramId  Int?
  academicProgram    AcademicProgram?  @relation(fields: [academicProgramId], references: [id])
  bannerProgramId    Int?             // Changed from String to Int
  bannerProgram      BannerProgram?   @relation(fields: [bannerProgramId], references: [id])
  projectProposals   ProjectProposal[]
  approvals         ProjectApproval[]
  notifications    Notification[]

  @@index([email])
  @@index([departmentId])
  @@index([academicProgramId])
  @@index([bannerProgramId])
  @@map("users")
}

model Department {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  abbreviation     String            @unique
  description      String?
  logoUrl          String?
  status           String            @default("ACTIVE")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  academicPrograms AcademicProgram[]
  users            User[]
  projectProposals ProjectProposal[]
  bannerPrograms   BannerProgram[]
  activities       Activity[]
  notifications    Notification[]

  @@map("departments")
}

model AcademicProgram {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  abbreviation     String            @unique
  description      String?
  totalStudents    Int               @default(0)
  status           String            @default("ACTIVE")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  departmentId     Int
  department       Department        @relation(fields: [departmentId], references: [id])
  bannerProgramId  Int? // Optional foreign key to BannerProgram
  bannerProgram    BannerProgram?    @relation(fields: [bannerProgramId], references: [id])
  projectProposals ProjectProposal[]
  users            User[]
  notifications    Notification[]

  @@index([departmentId])
  @@index([bannerProgramId])
  @@map("academic_programs")
}

model BannerProgram {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  abbreviation String  @unique
  description  String?
  yearStarted  Int
  status       String  @default("ACTIVE")

  // Foreign Keys
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])

  // Relationships
  academicPrograms AcademicProgram[] // New relation field
  projectProposals ProjectProposal[]
  activities       Activity[]
  notifications    Notification[]
  users            User[]   // Add this opposite relation

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([departmentId])
  @@index([status])
  @@map("banner_programs")
}

model ProjectProposal {
  id                  Int            @id @default(autoincrement())
  title               String
  description         String
  bannerProgramId     Int?
  bannerProgram       BannerProgram? @relation(fields: [bannerProgramId], references: [id])
  targetBeneficiaries String
  targetArea          String
  targetDate          DateTime
  venue               String
  budget              Decimal        @db.Decimal(10, 2)
  status              ProposalStatus  @default(PENDING)

  // File attachments
  attachments ProjectAttachment[] // One-to-many relationship with attachments

  // Foreign Keys
  departmentId Int
  department   Department       @relation(fields: [departmentId], references: [id])
  programId    Int?
  program      AcademicProgram? @relation(fields: [programId], references: [id])

  // Metadata
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  communityId Int?
  community   PartnerCommunity? @relation(fields: [communityId], references: [id])
  activities  Activity[] // Add this relation field
  approvals          ProjectApproval[]
  currentApprovalStep UserPosition     @default(CEC_HEAD)
  notifications    Notification[]
  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])

  @@index([departmentId])
  @@index([programId])
  @@index([userId])
  @@index([status])
  @@index([communityId])
  @@index([bannerProgramId])
  @@index([currentApprovalStep])
  @@index([schoolYearId])
  @@map("project_proposals")
}

model ProjectAttachment {
  id         Int      @id @default(autoincrement())
  fileName   String // Original file name
  fileUrl    String // URL or path where the file is stored
  fileSize   Int // Size in bytes
  fileType   String // MIME type (e.g., "application/pdf")
  uploadedAt DateTime @default(now())

  // Relationship with ProjectProposal
  proposalId Int
  proposal   ProjectProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@map("project_attachments")
}

enum ActivityStatus {
  UPCOMING      // Activity is approved and waiting to be conducted (future date)
  ONGOING       // Activity is currently being implemented
  COMPLETED     // Activity has been conducted and finished
  CANCELLED     // Activity was cancelled
}

model Activity {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  targetDate       DateTime
  status           ActivityStatus @default(UPCOMING)
  
  // Direct relationships
  departmentId     Int
  department       Department        @relation(fields: [departmentId], references: [id])
  
  partnerCommunityId Int
  partnerCommunity   PartnerCommunity  @relation(fields: [partnerCommunityId], references: [id])
  
  // Other documentation (optional, multiple)
  documents        ActivityDocument[] @relation("ActivityDocuments")

  // Relationship with ProjectProposal
  proposalId       Int
  proposal         ProjectProposal @relation(fields: [proposalId], references: [id])

  // Metadata
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Add these new fields
  bannerProgramId   Int?
  bannerProgram     BannerProgram? @relation(fields: [bannerProgramId], references: [id])
  notifications    Notification[]
  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])

  @@index([departmentId])
  @@index([partnerCommunityId])
  @@index([status])
  @@index([bannerProgramId])
  @@index([schoolYearId])
  @@map("activities")
}

model ActivityDocument {
  id          Int      @id @default(autoincrement())
  fileName    String
  fileUrl     String
  fileSize    Int
  fileType    String // MIME type
  category    String // PROPOSAL_FILE, DOCUMENTATION, FEEDBACK, IMAGE, etc.
  description String? // Optional description of the document
  uploadedAt  DateTime @default(now())

  // Relationships
  activityId  Int? // Make it optional since not all documents are regular attachments
  activity    Activity? @relation("ActivityDocuments", fields: [activityId], references: [id])
  // proposalFor Activity? @relation("ProposalFile") // For proposal files

  @@index([category])
  @@index([activityId])
  @@map("activity_documents")
}

model PartnerCommunity {
  id                Int         @id @default(autoincrement())
  name              String
  communityType     String      // Barangay, NGO, School, etc.
  address           String
  adoptionStart     DateTime
  adoptionEnd       DateTime?   // Optional end date (for ongoing partnerships)
  status            String      @default("ACTIVE") // ACTIVE, INACTIVE, COMPLETED
  contactPerson     String
  contactEmail      String?     // Optional email
  contactNumber     String
  description       String?     // Brief description or notes about the partnership
  islandGroup       String      // Luzon, Visayas, Mindanao
  region            String      // Region 1, Region 2, ..., Region 17
  province          String
  city              String
  postalCode        String
  coordinates       String      // Consider using a more structured type if needed
  elevationLevel    Float?
  population        Int?
  povertyPopulation Int?
  history           String?

  // Metadata
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relationships
  projectProposals  ProjectProposal[]
  activities        Activity[]
  notifications    Notification[]

  @@index([status])
  @@index([communityType])
  @@map("partner_communities")
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  priority    String   // e.g., "high", "medium", "low"
  author      String
  status      String   @default("active") // e.g., "active", "archived", "scheduled"
  category    String   // e.g., "event", "update", "alert"
  expirationDate DateTime?

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([priority])
  @@index([status])
  @@index([category])
  @@map("announcements")
}

model ProjectApproval {
  id               Int            @id @default(autoincrement())
  proposalId       Int
  proposal         ProjectProposal @relation(fields: [proposalId], references: [id])
  approverPosition UserPosition    // Renamed from approverRole
  approverUserId   String?
  approver         User?          @relation(fields: [approverUserId], references: [id])
  status           ApprovalStatus @default(PENDING)
  comment          String?
  approvedAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([proposalId, approverPosition])  // Updated unique constraint
  @@index([proposalId])
  @@index([approverUserId])
  @@map("project_approvals")
}

model Notification {
  id          String            @id @default(cuid())
  title       String
  content     String
  type        NotificationType
  priority    NotificationPriority @default(MEDIUM)
  status      NotificationStatus   @default(UNREAD)
  
  // Links to related entities
  userId      String            
  user        User             @relation(fields: [userId], references: [id])
  
  // Optional relations based on notification type
  proposalId  Int?             
  proposal    ProjectProposal? @relation(fields: [proposalId], references: [id])
  activityId  Int?             
  activity    Activity?        @relation(fields: [activityId], references: [id])
  
  // Department relation
  departmentId Int?            
  department   Department?     @relation(fields: [departmentId], references: [id])

  // Academic Program relation
  academicProgramId Int?
  academicProgram   AcademicProgram? @relation(fields: [academicProgramId], references: [id])

  // Banner Program relation
  bannerProgramId  Int?
  bannerProgram    BannerProgram? @relation(fields: [bannerProgramId], references: [id])

  // Partner Community relation
  partnerCommunityId Int?
  partnerCommunity   PartnerCommunity? @relation(fields: [partnerCommunityId], references: [id])
  
  // Action data
  actionUrl   String?          
  actionLabel String?          
  
  // Metadata
  createdAt   DateTime         @default(now())
  readAt      DateTime?        
  expiresAt   DateTime?        
  
  // For batch notifications
  groupId     String?         

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([departmentId])
  @@index([academicProgramId])
  @@index([bannerProgramId])
  @@index([partnerCommunityId])
  @@index([proposalId])
  @@index([activityId])
  @@map("notifications")
}

model SchoolYear {
  id            Int       @id @default(autoincrement())
  year          String    @unique // e.g., "2023-2024"
  startDate     DateTime
  endDate       DateTime
  isCurrent     Boolean   @default(false)
  status        String    @default("ACTIVE") // ACTIVE, CLOSED, UPCOMING
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  projectProposals ProjectProposal[]
  activities       Activity[]
  announcements    Announcement[]

  @@index([isCurrent])
  @@index([status])
  @@map("school_years")
}
